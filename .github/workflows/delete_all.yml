name: /!\ Destroy K8s Cluster and Helm Charts /!\

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"


      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cluster_id=$(scw k8s cluster list name=k8s-cluster project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$cluster_id" || "$cluster_id" == "null" ]]; then
            echo "Error: Kubernetes cluster ID not found or is not valid."
            exit 1
          fi
          scw k8s kubeconfig get "$cluster_id" > ~/.kube/config

      - name: Uninstall All Helm Charts
        continue-on-error: true
        run: |
          echo "Uninstalling Helm charts..."
          if helm list -n default | grep -q 'prometheus'; then
            helm uninstall prometheus --namespace default
          else
            echo "Prometheus not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'prometheus-operator'; then
            helm uninstall prometheus-operator --namespace default
          else
            echo "Prometheus Operator not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'logstash'; then
            helm uninstall logstash --namespace default
          else
            echo "Logstash not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'filebeat'; then
            helm uninstall filebeat --namespace default
          else
            echo "Filebeat not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'elasticsearch'; then
            helm uninstall elasticsearch --namespace default
          else
            echo "Elasticsearch not installed in the default namespace."
          fi
      
          if helm list -n istio-system | grep -q 'istio-ingress'; then
            helm uninstall istio-ingress --namespace istio-system
          else
            echo "Istio Ingress not installed in the istio-system namespace."
          fi
      
          if helm list -n istio-system | grep -q 'istiod'; then
            helm uninstall istiod --namespace istio-system
          else
            echo "Istiod not installed in the istio-system namespace."
          fi

          if helm list -n default | grep -q 'falco'; then
            helm uninstall falco --namespace default
          else
            echo "Falco not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'ingress-nginx'; then
            helm uninstall ingress-nginx --namespace default
          else
            echo "Ingress-nginx not installed in the default namespace."
          fi
          if helm list -n default | grep -q 'iris'; then
            helm uninstall iris --namespace default
          else
            echo "Iris not installed in the default namespace."
          fi
      
          if helm list -n default | grep -q 'kibana'; then
            echo "Uninstalling Kibana in the background..."
            helm uninstall kibana --namespace default --wait=false &
          else
            echo "Kibana not installed in the default namespace."
          fi

          if helm list -n default | grep -q 'cortex'; then
            helm uninstall cortex --namespace default
          else
            echo "Cortex not installed in the default namespace."
          fi
      
      - name: Clean Up Kibana Resources
        continue-on-error: true
        run: |
          echo "Attempting to clean up Kibana resources..."
          kubectl delete sa post-delete-kibana-kibana -n default || echo "ServiceAccount already deleted or not found"
          kubectl delete cm kibana-kibana-helm-scripts -n default || echo "ConfigMap already deleted or not found"
          kubectl delete job post-delete-kibana-kibana -n default || echo "Job already deleted or not found"
          kubectl delete role post-delete-kibana-kibana -n default || echo "Role already deleted or not found"
          kubectl delete rolebinding post-delete-kibana-kibana -n default || echo "RoleBinding already deleted or not found"
          kubectl delete secret kibana-kibana-es-token -n default || echo "Secret already deleted or not found"
          kubectl delete secret sh.helm.release.v1.kibana.v1 -n default || echo "Helm release secret already deleted or not found"
      
      - name: List and Delete All PVCs
        run: |
          # Get all PVC names in the default namespace
          pvc_names=$(kubectl get pvc -o jsonpath='{.items[*].metadata.name}')
          
          if [ -z "$pvc_names" ]; then
            echo "No PVCs found."
          else
            for pvc_name in $pvc_names; do
              echo "Deleting PVC $pvc_name..."
              kubectl delete pvc "$pvc_name" || echo "Failed to delete PVC $pvc_name. It may be in use."
            done
          fi

      - name: Log in to Scaleway Container Registry
        run: |
          echo "${{ secrets.SCW_SECRET_KEY }}" | docker login rg.fr-par.scw.cloud -u "${{ secrets.SCW_ACCESS_KEY }}" --password-stdin

      - name: Clean existing images and Kubernetes resources
        run: |
          echo "Deleting images in frontend namespace..."
          frontend_namespace_id=$(scw registry namespace list name=frontend --output json | jq -r '.[0].id')
          if [ -n "$frontend_namespace_id" ]; then
            frontend_images=$(scw registry image list namespace-id="$frontend_namespace_id" region=fr-par --output json | jq -r '.[].id')
            if [ -n "$frontend_images" ]; then
              for image_id in $frontend_images; do
                echo "Deleting image $image_id in frontend namespace..."
                scw registry image delete image-id="$image_id" region=fr-par || true
              done
            else
              echo "No images found in frontend namespace."
            fi
          else
            echo "Frontend namespace not found."
          fi
          
          echo "Deleting images in backend2 namespace..."
          backend_namespace_id=$(scw registry namespace list name=backend2 --output json | jq -r '.[0].id')
          if [ -n "$backend_namespace_id" ]; then
            backend_images=$(scw registry image list namespace-id="$backend_namespace_id" region=fr-par --output json | jq -r '.[].id')
            if [ -n "$backend_images" ]; then
              for image_id in $backend_images; do
                echo "Deleting image $image_id in backend2 namespace..."
                scw registry image delete image-id="$image_id" region=fr-par || true
              done
            else
              echo "No images found in backend2 namespace."
            fi
          else
            echo "Backend2 namespace not found."
          fi
      
          echo "Deleting frontend Kubernetes resources..."
          kubectl delete deployment frontend || true
          kubectl delete service frontend-service || true
          
          echo "Deleting backend Kubernetes resources..."
          kubectl delete deployment backend || true
          kubectl delete service backend-service || true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: app.terraform.io
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: latest

      - name: Terraform Init for Destroy
        working-directory: ./infra
        env:
          TF_VAR_scw_access_key: ${{ secrets.SCW_ACCESS_KEY }}
          TF_VAR_scw_secret_key: ${{ secrets.SCW_SECRET_KEY }}
          TF_VAR_scw_project_id: ${{ secrets.SCW_PROJECT_ID }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./infra
        env:
          TF_VAR_scw_access_key: ${{ secrets.SCW_ACCESS_KEY }}
          TF_VAR_scw_secret_key: ${{ secrets.SCW_SECRET_KEY }}
          TF_VAR_scw_project_id: ${{ secrets.SCW_PROJECT_ID }}
        run: terraform destroy -auto-approve

      


