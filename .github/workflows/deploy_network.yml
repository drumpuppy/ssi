name: Deploy Network

on:
  workflow_dispatch:

jobs:
  deploy-network:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Étape 3 : Installer Scaleway CLI
      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      # Étape 4 : Configurer Scaleway CLI
      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"

      # Étape 5 : Associer un tag fixe au Load Balancer
      - name: Tag Load Balancer
        run: |
          echo "Tagging the Load Balancer with 'my-loadbalancer' tag..."
          LB_ID=$(scw lb list project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$LB_ID" || "$LB_ID" == "null" ]]; then
            echo "Error: No Load Balancer found in the project."
            exit 1
          fi
          echo "Found Load Balancer ID: $LB_ID"
          scw lb update id="$LB_ID" tags="my-loadbalancer"
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # Étape 6 : Récupérer l'adresse IP publique via le tag
      - name: Get Load Balancer Public IP
        id: get_lb_ip
        run: |
          echo "Fetching Load Balancer by tag 'my-loadbalancer'..."
          LB_JSON=$(scw lb list project-id=${{ secrets.SCW_PROJECT_ID }} --output json)
          LB_ID=$(echo "$LB_JSON" | jq -r '.[] | select(.tags[] == "my-loadbalancer") | .id')
          if [[ -z "$LB_ID" || "$LB_ID" == "null" ]]; then
            echo "Error: No Load Balancer found with the tag 'my-loadbalancer'."
            exit 1
          fi
          echo "Found Load Balancer ID: $LB_ID"
          PUBLIC_IP=$(scw lb get id=$LB_ID --output json | jq -r '.ip')
          if [[ -z "$PUBLIC_IP" || "$PUBLIC_IP" == "null" ]]; then
            echo "Error: Public IP not found for Load Balancer."
            exit 1
          fi
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::$PUBLIC_IP"
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # Étape 7 : Mettre à jour les DNS avec l'IP du Load Balancer
      - name: Update DNS Records
        run: |
          PUBLIC_IP="${{ steps.get_lb_ip.outputs.public_ip }}"
          echo "Updating DNS records with IP: $PUBLIC_IP"
          python3 ./dns_update.py "$PUBLIC_IP"

      # Étape 8 : Déploiement des ressources réseau (Ingress, cert-manager)
      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx

      - name: Deploy cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
          sleep 20

      - name: Deploy ClusterIssuer
        run: |
          kubectl apply -f ./Ingress/clusterIssuer.yaml -n default

      - name: Deploy Ingress
        run: |
          kubectl apply -f ./Ingress/network.yaml
