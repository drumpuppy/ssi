name: Deploy Network

on:
  workflow_dispatch:

jobs:
  deploy-network:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Helm (si nécessaire)
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Étape 3 : Installer Scaleway CLI
      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      # Étape 4 : Configurer Scaleway CLI
      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"

      # Étape 5 : Configurer kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cluster_id=$(scw k8s cluster list name=k8s-cluster project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$cluster_id" || "$cluster_id" == "null" ]]; then
            echo "Error: Kubernetes cluster ID not found or is not valid."
            exit 1
          fi
          echo "Cluster ID: $cluster_id"
          scw k8s kubeconfig get "$cluster_id" > ~/.kube/config

      # Étape 6 : Déployer le contrôleur NGINX et attendre qu'il soit prêt
      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx

      # Étape 7 : Déployer cert-manager et le ClusterIssuer
      - name: Deploy cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml

      - name: Deploy ClusterIssuer
        run: |
          kubectl apply -f ./Ingress/clusterIssuer.yaml

      # Étape 8 : Vérification et suppression des anciens Ingress, puis application des nouveaux Ingress
      - name: Deploy Prometheus Ingress
        run: |
          if kubectl get ingress prometheus-ingress; then
            echo "Ingress prometheus-ingress exists, deleting..."
            kubectl delete ingress prometheus-ingress
          fi
          kubectl apply -f ./Ingress/prometheus-ingress.yml

      - name: Deploy Iris Ingress
        run: |
          if kubectl get ingress iris-ingress; then
            echo "Ingress iris-ingress exists, deleting..."
            kubectl delete ingress iris-ingress
          fi
          kubectl apply -f ./Ingress/iris-ingress.yml

      - name: Deploy Kibana Ingress
        run: |
          if kubectl get ingress kibana-ingress; then
            echo "Ingress kibana-ingress exists, deleting..."
            kubectl delete ingress kibana-ingress
          fi
          kubectl apply -f ./Ingress/kibana-ingress.yml

      - name: Deploy Demo Ingress
        run: |
          if kubectl get ingress demo-ingress; then
            echo "Ingress demo-ingress exists, deleting..."
            kubectl delete ingress demo-ingress
          fi
          kubectl apply -f ./Ingress/demo-ingress.yml

      # Étape 9 : Suppression des Ingress
      - name: Delete Ingress resources
        run: |
          kubectl delete ingress prometheus-ingress
          kubectl delete ingress iris-ingress
          kubectl delete ingress kibana-ingress
          kubectl delete ingress demo-ingress

      # Étape 10 : Suppression du Load Balancer
      - name: Delete Load Balancer
        run: |
          lb_id=$(scw lb server list project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
            if [[ -z "$lb_id" || "$lb_id" == "null" ]]; then
          echo "Error: Load Balancer ID not found or is not valid."
          exit 1
          fi
          echo "Load Balancer ID: $lb_id"
          scw lb server delete "$lb_id"
