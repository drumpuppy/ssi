name: Deploy Network

on:
  workflow_dispatch:

jobs:
  deploy-network:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Helm (si nécessaire)
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Étape 3 : Installer Scaleway CLI
      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      # Étape 4 : Configurer Scaleway CLI
      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"

      # Étape 5 : Configurer kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cluster_id=$(scw k8s cluster list name=k8s-cluster project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$cluster_id" || "$cluster_id" == "null" ]]; then
            echo "Error: Kubernetes cluster ID not found or is not valid."
            exit 1
          fi
          echo "Cluster ID: $cluster_id"
          scw k8s kubeconfig get "$cluster_id" > ~/.kube/config

      # Étape 6 : Clean des Ressources
      - name: Delete network resources
        continue-on-error: true
        run: |
          kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml -n ingress-nginx
          kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml -n cert-manager
          kubectl delete -f ./ingress/clusterIssuer.yaml -n default
          kubectl delete -f ./Ingress/network.yaml

      # Étape 7 : Déployer les Ressources Réseau
      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx

      - name: Deploy cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
          sleep 20

      - name: Deploy ClusterIssuer
        run: |
          kubectl apply -f ./Ingress/clusterIssuer.yaml -n default

      - name: Deploy Ingress
        run: |
          kubectl apply -f ./Ingress/network.yaml

      # Étape 8 : Récupérer l'IP Publique du Load Balancer
      - name: Get Public IP of Load Balancer
        id: get_lb_ip
        run: |
          LB_ID=$(scw lb list name=my-lb project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$LB_ID" || "$LB_ID" == "null" ]]; then
            echo "Error: Load Balancer ID not found or is invalid."
            exit 1
          fi
          echo "Load Balancer ID: $LB_ID"
          PUBLIC_IP=$(scw lb get id=$LB_ID --output json | jq -r '.ip')
          if [[ -z "$PUBLIC_IP" || "$PUBLIC_IP" == "null" ]]; then
            echo "Error: Public IP not found for Load Balancer."
            exit 1
          fi
          echo "::set-output name=public_ip::$PUBLIC_IP"
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}

      # Étape 9 : Mettre à Jour les Enregistrements DNS via OVH
      - name: Update DNS Records via OVH
        run: |
          DOMAIN="my-soc.fr"
          SUBDOMAINS=("prometheus" "iris" "kibana" "doctobobo")
          PUBLIC_IP="${{ steps.get_lb_ip.outputs.public_ip }}"
          
          for SUBDOMAIN in "${SUBDOMAINS[@]}"; do
            RECORD_ID=$(curl -s -X GET -H "X-Ovh-Application: ${{ secrets.OVH_APP_KEY }}" \
              -H "X-Ovh-Consumer: ${{ secrets.OVH_CONSUMER_KEY }}" \
              "https://eu.api.ovh.com/1.0/domain/zone/$DOMAIN/record?fieldType=A&subDomain=$SUBDOMAIN" \
              | jq -r '.[0]')
            
            if [[ -n "$RECORD_ID" ]]; then
              echo "Updating DNS record for $SUBDOMAIN.$DOMAIN with IP $PUBLIC_IP"
              curl -s -X PUT -H "X-Ovh-Application: ${{ secrets.OVH_APP_KEY }}" \
                -H "X-Ovh-Consumer: ${{ secrets.OVH_CONSUMER_KEY }}" \
                -d "{\"target\":\"$PUBLIC_IP\"}" \
                "https://eu.api.ovh.com/1.0/domain/zone/$DOMAIN/record/$RECORD_ID"
            else
              echo "Creating new DNS record for $SUBDOMAIN.$DOMAIN with IP $PUBLIC_IP"
              curl -s -X POST -H "X-Ovh-Application: ${{ secrets.OVH_APP_KEY }}" \
                -H "X-Ovh-Consumer: ${{ secrets.OVH_CONSUMER_KEY }}" \
                -d "{\"fieldType\":\"A\",\"subDomain\":\"$SUBDOMAIN\",\"target\":\"$PUBLIC_IP\"}" \
                "https://eu.api.ovh.com/1.0/domain/zone/$DOMAIN/record"
            fi
          done

          # Commit changes to the DNS zone
          curl -s -X POST -H "X-Ovh-Application: ${{ secrets.OVH_APP_KEY }}" \
            -H "X-Ovh-Consumer: ${{ secrets.OVH_CONSUMER_KEY }}" \
            "https://eu.api.ovh.com/1.0/domain/zone/$DOMAIN/refresh"
