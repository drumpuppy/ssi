name: Deploy demo app

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      # Step 3: Configure Scaleway CLI for the cluster
      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cluster_id=$(scw k8s cluster list name=k8s-cluster project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$cluster_id" || "$cluster_id" == "null" ]]; then
            echo "Error: Kubernetes cluster ID not found or is not valid."
            exit 1
          fi
          echo "Cluster ID: $cluster_id"
          scw k8s kubeconfig get "$cluster_id" > ~/.kube/config

      - name: Log in to Scaleway Container Registry
        run: |
          echo "${{ secrets.SCW_SECRET_KEY }}" | docker login rg.fr-par.scw.cloud -u "${{ secrets.SCW_ACCESS_KEY }}" --password-stdin

      - name: Clean existing images and Kubernetes resources
        run: |
          echo "Deleting images in frontend namespace..."
          frontend_namespace_id=$(scw registry namespace list name=frontend --output json | jq -r '.[0].id')
          if [ -n "$frontend_namespace_id" ]; then
            frontend_images=$(scw registry image list namespace-id="$frontend_namespace_id" region=fr-par --output json | jq -r '.[].id')
            if [ -n "$frontend_images" ]; then
              for image_id in $frontend_images; do
                echo "Deleting image $image_id in frontend namespace..."
                scw registry image delete image-id="$image_id" region=fr-par || true
              done
            else
              echo "No images found in frontend namespace."
            fi
          else
            echo "Frontend namespace not found."
          fi
          
          echo "Deleting images in backend2 namespace..."
          backend_namespace_id=$(scw registry namespace list name=backend2 --output json | jq -r '.[0].id')
          if [ -n "$backend_namespace_id" ]; then
            backend_images=$(scw registry image list namespace-id="$backend_namespace_id" region=fr-par --output json | jq -r '.[].id')
            if [ -n "$backend_images" ]; then
              for image_id in $backend_images; do
                echo "Deleting image $image_id in backend2 namespace..."
                scw registry image delete image-id="$image_id" region=fr-par || true
              done
            else
              echo "No images found in backend2 namespace."
            fi
          else
            echo "Backend2 namespace not found."
          fi
      
          echo "Deleting frontend Kubernetes resources..."
          kubectl delete deployment frontend || true
          kubectl delete service frontend-service || true
          
          echo "Deleting backend Kubernetes resources..."
          kubectl delete deployment backend || true
          kubectl delete service backend-service || true


      # Step 5: Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          docker build -t rg.fr-par.scw.cloud/backend2/backend:latest ./doctobobo/backend
          docker push rg.fr-par.scw.cloud/backend2/backend:latest

      # Step 6: Build and push frontend Docker image
      #- name: Build and push frontend Docker image
      #  run: |
      #    docker build -t rg.fr-par.scw.cloud/frontend/frontend:latest ./doctobobo/frontend
      #    docker push rg.fr-par.scw.cloud/frontend/frontend:latest

      # Step 8: Deploy backend to Kubernetes
      - name: Deploy backend
        run: |
          kubectl apply -f ./doctobobo/backend/backend-deployment.yaml
          kubectl apply -f ./doctobobo/backend/mysql-deployment.yaml

      # Step 9: Deploy frontend to Kubernetes
      #- name: Deploy frontend
      #  run: |
      #    kubectl apply -f doctobobo/frontend/frontend-deployment.yaml

      # Step 10: Verify deployments
      - name: Check deployment status
        run: |
          kubectl get pods -o wide
          kubectl get services -o wide
