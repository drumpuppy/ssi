name: Snapshot PVC

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-region="fr-par"
          scw config set default-zone="fr-par-1"

          export SCW_DEFAULT_ZONE=$(scw config get default-zone)
          echo "SCW_DEFAULT_ZONE=$SCW_DEFAULT_ZONE" >> $GITHUB_ENV
          export SCW_SECRET_KEY="${SCW_SECRET_KEY}"
          echo "SCW_SECRET_KEY=${SCW_SECRET_KEY}" >> $GITHUB_ENV
          export SCW_DEFAULT_PROJECT_ID=$(scw config get default-project-id)
          echo "SCW_DEFAULT_PROJECT_ID=${SCW_DEFAULT_PROJECT_ID}" >> $GITHUB_ENV

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cluster_id=$(scw k8s cluster list name=k8s-cluster project-id=${{ secrets.SCW_PROJECT_ID }} --output json | jq -r '.[0].id')
          if [[ -z "$cluster_id" || "$cluster_id" == "null" ]]; then
            echo "Error: Kubernetes cluster ID not found or is not valid."
            exit 1
          fi
          echo "Cluster ID: $cluster_id"
          scw k8s kubeconfig get "$cluster_id" > ~/.kube/config

      - name: Create snapshot from PVCs before deletion
        run: |
          PVC_LIST=("default elasticsearch-master-elasticsearch-master-0" "doctobobo mysql-pvc")

          # Ensure volumes.json exists and is not empty
          if [ ! -s volumes.json ]; then
            echo "⚠️ Warning: volumes.json is empty or missing. Skipping volume lookup..."
            touch volumes.json
          fi

          for entry in "${PVC_LIST[@]}"; do
            namespace=$(echo $entry | awk '{print $1}')
            pvc=$(echo $entry | awk '{print $2}')

            # Check if the PVC exists before proceeding
            pvc_name=$(kubectl get pvc $pvc -n $namespace -o jsonpath='{.spec.volumeName}' 2>/dev/null || echo "")
            if [ -z "$pvc_name" ]; then
              echo "⚠️ PVC $pvc not found in namespace $namespace, skipping..."
              continue
            fi

            # Extract volume ID from volumes.json
            volume_id=$(jq -r --arg pvc_name "$pvc_name" '.volumes[]? | select(.name | contains($pvc_name)) | .id' volumes.json)
            if [ -z "$volume_id" ] || [ "$volume_id" == "null" ]; then
              echo "⚠️ No Scaleway volume found for PVC $pvc ($pvc_name), skipping..."
              continue
            fi

            # Create snapshot
            snapshot_name="$pvc-$(date +%Y%m%d%H%M%S)"
            echo "✅ Creating snapshot for $pvc ($pvc_name)..."
            curl -X POST -H "X-Auth-Token: ${SCW_SECRET_KEY}" \
                 -H "Content-Type: application/json" \
                 -d '{
                      "name": "'"$snapshot_name"'",
                      "volume_id": "'"$volume_id"'",
                      "project_id": "'"$SCW_DEFAULT_PROJECT_ID"'"
                    }' \
                 "https://api.scaleway.com/block/v1alpha1/zones/${SCW_DEFAULT_ZONE}/snapshots"
          done
