name: Deploy OVH

on:
  workflow_dispatch:

jobs:
  deploy-network:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Helm (si nécessaire)
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Étape 3 : Installer Scaleway CLI
      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh
          scw version

      # Étape 4 : Configurer Scaleway CLI
      - name: Configure Scaleway CLI
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_DEFAULT_REGION: fr-par
          SCW_DEFAULT_ZONE: fr-par-1
        run: |
          mkdir -p ~/.config/scw
          touch ~/.config/scw/config.yaml
          scw config set access-key="${SCW_ACCESS_KEY}"
          scw config set secret-key="${SCW_SECRET_KEY}"
          scw config set default-organization-id="${SCW_DEFAULT_ORGANIZATION_ID}"
          scw config set default-project-id="${SCW_DEFAULT_PROJECT_ID}"
          scw config set default-region="${SCW_DEFAULT_REGION}"
          scw config set default-zone="${SCW_DEFAULT_ZONE}"

      # Étape 5 : Récupérer l'IP du Load Balancer
      - name: Get Load Balancer IP
        id: get-lb-ip
        run: |
          lb_data=$(scw lb ip list --output json)
          echo "Debugging Load Balancer Data: $lb_data"
          if [[ -z "$lb_data" || "$lb_data" == "null" ]]; then
            echo "Error: No Load Balancer IPs found."
            exit 1
          fi
          # Extraction de l'adresse IP à partir du champ 'ip_address'
          lb_ip=$(echo "$lb_data" | jq -r '.[0].ip_address')
          if [[ -z "$lb_ip" || "$lb_ip" == "null" ]]; then
            echo "Error: Load Balancer IP not found."
            exit 1
          fi
          echo "Load Balancer IP: $lb_ip"
          echo "lb_ip=$lb_ip" >> $GITHUB_ENV


      # Étape 6 : Mise à jour des domaines OVH
      - name: Update OVH Domains
        env:
          OVH_APP_KEY: ${{ secrets.OVH_APP_KEY }}
          OVH_APP_SECRET: ${{ secrets.OVH_APP_SECRET }}
          OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
          LOAD_BALANCER_IP: ${{ env.lb_ip }}
        run: |
          python3 -m pip install --upgrade pip
          pip install ovh
          python3 - <<EOF
          import ovh

          # Configuration OVH
          client = ovh.Client(
              endpoint="ovh-eu",
              application_key="${{ secrets.OVH_APP_KEY }}",
              application_secret="${{ secrets.OVH_APP_SECRET }}",
              consumer_key="${{ secrets.OVH_CONSUMER_KEY }}"
          )

          domains = ["prometheus.my-soc.fr", "iris.my-soc.fr", "kibana.my-soc.fr", "doctobobo.my-soc.fr"]
          lb_ip = "${{ env.LOAD_BALANCER_IP }}"

          for domain in domains:
              record_name = domain.split(".")[0]
              zone_name = ".".join(domain.split(".")[1:])
              print(f"Updating {domain} to point to {lb_ip}...")
              records = client.get(f"/domain/zone/{zone_name}/record", fieldType="A", subDomain=record_name)

              for record_id in records:
                  client.delete(f"/domain/zone/{zone_name}/record/{record_id}")

              client.post(f"/domain/zone/{zone_name}/record", fieldType="A", subDomain=record_name, target=lb_ip, ttl=3600)
              client.post(f"/domain/zone/{zone_name}/refresh")
          EOF




      


